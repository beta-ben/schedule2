name: Deploy API (staging) to Cloudflare Workers

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

jobs:
  deploy-staging-worker:
    runs-on: ubuntu-latest
    env:
      CI: 'true'
      # Set to '0' to enable account verify steps; default '1' skips to avoid hangs/mismatch noise
      SKIP_CF_VERIFY: '1'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve Cloudflare env
        env:
          SECRET_CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          SECRET_CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: |
          # Canonicalize Cloudflare env vars from available secrets (current repo uses CF_* secrets)
          CF_API_TOKEN_INPUT="${SECRET_CF_API_TOKEN}"
          CF_ACCOUNT_ID_INPUT="${SECRET_CF_ACCOUNT_ID}"

          echo "CLOUDFLARE_API_TOKEN=$CF_API_TOKEN_INPUT" >> "$GITHUB_ENV"
          echo "CLOUDFLARE_ACCOUNT_ID=$CF_ACCOUNT_ID_INPUT" >> "$GITHUB_ENV"
          # Legacy aliases for compatibility
          echo "CF_API_TOKEN=$CF_API_TOKEN_INPUT" >> "$GITHUB_ENV"
          echo "CF_ACCOUNT_ID=$CF_ACCOUNT_ID_INPUT" >> "$GITHUB_ENV"

      - name: List repo (diagnostic)
        run: |
          pwd
          ls -la

      - name: Validate Cloudflare credentials
        run: |
          missing=0
          [ -n "${CLOUDFLARE_API_TOKEN}" ] || { echo "CLOUDFLARE_API_TOKEN missing"; missing=1; }
          [ -n "${CLOUDFLARE_ACCOUNT_ID}" ] || { echo "CLOUDFLARE_ACCOUNT_ID missing"; missing=1; }
          # Compatibility checks (non-fatal)
          [ -n "${CF_API_TOKEN}" ] || echo "(compat) CF_API_TOKEN missing"
          [ -n "${CF_ACCOUNT_ID}" ] || echo "(compat) CF_ACCOUNT_ID missing"
          [ "$missing" -eq 0 ] || exit 1

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Wrangler diagnostics
        run: |
          npx --yes wrangler@3.90.0 --version
          npx --yes wrangler@3.90.0 whoami --api-token "$CLOUDFLARE_API_TOKEN" || true

      - name: Verify account matches CLOUDFLARE_ACCOUNT_ID
        if: env.SKIP_CF_VERIFY != '1'
        run: |
          set -e
          json=$(npx --yes wrangler@3.90.0 whoami --format=json --api-token "$CLOUDFLARE_API_TOKEN" || true)
          echo "Wrangler whoami output: $json"
          acc=$(node -e 'let s="";process.stdin.on("data",d=>s+=d).on("end",()=>{try{const j=JSON.parse(s);console.log(j.account_id||j.accountId||"")}catch{}});' <<< "$json")
          echo "Wrangler Account ID: $acc"
          echo "Env CLOUDFLARE_ACCOUNT_ID: $CLOUDFLARE_ACCOUNT_ID"
          if [ -n "$acc" ] && [ -n "$CLOUDFLARE_ACCOUNT_ID" ] && [ "$acc" != "$CLOUDFLARE_ACCOUNT_ID" ]; then
            echo "Account mismatch: whoami=$acc vs CLOUDFLARE_ACCOUNT_ID=$CLOUDFLARE_ACCOUNT_ID"; exit 1;
          fi

      - name: List KV namespaces (diagnostic)
        working-directory: team-schedule-api
        run: |
          echo "Listing KV namespaces for account..."
          npx --yes wrangler@3 kv namespace list || true

      - name: Dry-run build with Wrangler (no deploy)
        working-directory: team-schedule-api
        run: |
          ls -la
          cat wrangler.toml
          npx --yes wrangler@3.90.0 deploy --env staging --config wrangler.toml --account-id "$CLOUDFLARE_ACCOUNT_ID" --api-token "$CLOUDFLARE_API_TOKEN" --dry-run --outdir .wrangler_tmp

      - name: Deploy with Wrangler (staging)
        working-directory: team-schedule-api
        run: |
          npx --yes wrangler@3.90.0 deploy --env staging --config wrangler.toml --account-id "$CLOUDFLARE_ACCOUNT_ID" --api-token "$CLOUDFLARE_API_TOKEN" --verbose
