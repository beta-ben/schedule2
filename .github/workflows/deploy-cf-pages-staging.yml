name: Deploy Staging to Cloudflare Pages

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      CI: 'true'
      SKIP_CF_VERIFY: '1'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve Cloudflare env
        env:
          SECRET_CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          SECRET_CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: |
          CF_API_TOKEN_INPUT="${SECRET_CF_API_TOKEN}"
          CF_ACCOUNT_ID_INPUT="${SECRET_CF_ACCOUNT_ID}"
          echo "CLOUDFLARE_API_TOKEN=$CF_API_TOKEN_INPUT" >> "$GITHUB_ENV"
          echo "CLOUDFLARE_ACCOUNT_ID=$CF_ACCOUNT_ID_INPUT" >> "$GITHUB_ENV"
          # Legacy aliases
          echo "CF_API_TOKEN=$CF_API_TOKEN_INPUT" >> "$GITHUB_ENV"
          echo "CF_ACCOUNT_ID=$CF_ACCOUNT_ID_INPUT" >> "$GITHUB_ENV"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Prepare staging env
        run: |
          # If a repo-level override is provided, write it to .env.production
          if [ -n "${{ secrets.VITE_SCHEDULE_API_BASE_STAGING }}" ]; then
            echo "VITE_SCHEDULE_API_BASE=${{ secrets.VITE_SCHEDULE_API_BASE_STAGING }}" > .env.production
          elif [ -f .env.production.staging ]; then
            cp .env.production.staging .env.production
          else
            # Fallback to staging workers.dev API
            echo "VITE_SCHEDULE_API_BASE=https://team-schedule-api-staging.phorbie.workers.dev" > .env.production
          fi
          # Explicitly avoid forcing env base on staging unless we intentionally set VITE_FORCE_API_BASE=yes
          echo "VITE_FORCE_API_BASE=no" >> .env.production

      - name: Validate Cloudflare env
        run: |
          [ -n "${CLOUDFLARE_API_TOKEN}" ] || { echo "CLOUDFLARE_API_TOKEN missing"; exit 1; }
          [ -n "${CLOUDFLARE_ACCOUNT_ID}" ] || { echo "CLOUDFLARE_ACCOUNT_ID missing"; exit 1; }
          PRJ="${{ secrets.CF_PAGES_PROJECT_NAME }}"; if [ -z "$PRJ" ]; then PRJ="schedule2-staging"; fi
          echo "Using Pages project: $PRJ"
          echo "PRJ=$PRJ" >> $GITHUB_ENV

      - name: Build
        run: npm run build

      - name: Adjust CSP for staging (allow staging Worker)
        run: |
          if [ -f dist/_headers ]; then
            echo "Patching dist/_headers connect-src for staging..."
            sed -i "s#connect-src 'self' https://api\.teamschedule\.cc;#connect-src 'self' https://team-schedule-api-staging.phorbie.workers.dev https://api.teamschedule.cc;#" dist/_headers || true
            echo '--- dist/_headers (head) ---'
            head -n 20 dist/_headers || true
          fi

      - name: Wrangler info (diagnostic)
        run: |
          npx --yes wrangler@3.90.0 --version
          npx --yes wrangler@3.90.0 whoami --api-token "$CLOUDFLARE_API_TOKEN" || true
          npx --yes wrangler@3.90.0 pages project list --api-token "$CLOUDFLARE_API_TOKEN" --account-id "$CLOUDFLARE_ACCOUNT_ID" | grep -E "^${PRJ}\b" || true

      - name: Ensure Cloudflare Pages project exists (idempotent)
        run: |
          npx --yes wrangler@3.90.0 pages project create "${PRJ}" \
            --production-branch=staging --no-interactive \
            --api-token "$CLOUDFLARE_API_TOKEN" --account-id "$CLOUDFLARE_ACCOUNT_ID" || true

      - name: Ensure production branch is 'staging' (idempotent)
        run: |
          npx --yes wrangler@3.90.0 pages project update "${PRJ}" \
            --production-branch=staging --no-interactive \
            --api-token "$CLOUDFLARE_API_TOKEN" --account-id "$CLOUDFLARE_ACCOUNT_ID" || true

      - name: Ensure custom domain attached (idempotent)
        run: |
          DOMAIN="staging.teamschedule.cc"
          npx --yes wrangler@3.90.0 pages domain add "${PRJ}" "$DOMAIN" --no-interactive \
            --api-token "$CLOUDFLARE_API_TOKEN" --account-id "$CLOUDFLARE_ACCOUNT_ID" || true

      - name: "Publish to Cloudflare Pages (preview: branch=staging)"
        run: |
          npx --yes wrangler@3.90.0 pages deploy ./dist --project-name "${PRJ}" --branch staging --commit-dirty=true \
            --api-token "$CLOUDFLARE_API_TOKEN" --account-id "$CLOUDFLARE_ACCOUNT_ID"

      - name: Publish to Cloudflare Pages (production)
        run: |
          npx --yes wrangler@3.90.0 pages deploy ./dist --project-name "${PRJ}" --production --commit-dirty=true \
            --api-token "$CLOUDFLARE_API_TOKEN" --account-id "$CLOUDFLARE_ACCOUNT_ID"

      - name: List Pages domains (diagnostic)
        run: |
          npx --yes wrangler@3.90.0 pages domain list "${PRJ}" --api-token "$CLOUDFLARE_API_TOKEN" --account-id "$CLOUDFLARE_ACCOUNT_ID"

      - name: List deployments (diagnostic)
        run: |
          echo "Production deployments:" && npx --yes wrangler@3 pages deployment list "${PRJ}" --production || true
          echo "Preview deployments:" && npx --yes wrangler@3 pages deployment list "${PRJ}" || true
