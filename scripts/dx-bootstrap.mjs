#!/usr/bin/env node
/**
 * DX Bootstrap / Sync Script
 * Idempotently ensures developer tooling (lint, format, test) exists.
 * - Merges scripts (lint, test, ci, etc.) into package.json
 * - Adds devDependencies (eslint, vitest, prettier, plugins) if missing
 * - Writes config files (.eslintrc.cjs, .prettierrc.json, vitest.config.ts) when absent
 * - Adds sample util test if none exist
 *
 * Usage: node scripts/dx-bootstrap.mjs
 */
import { readFileSync, writeFileSync, existsSync, mkdirSync } from 'fs'
import { execSync } from 'child_process'
import path from 'path'

const ROOT = process.cwd()
function log(msg){ console.log(`ðŸ”§ ${msg}`) }
function safeJSON(pathStr){ try{ return JSON.parse(readFileSync(pathStr,'utf8')) }catch{ return null } }

const pkgPath = path.join(ROOT,'package.json')
const pkg = safeJSON(pkgPath)
if(!pkg){ console.error('package.json not found â€“ run from project root'); process.exit(1) }

pkg.scripts = pkg.scripts || {}
const wantScripts = {
  lint: "eslint 'src/**/*.{ts,tsx}' --max-warnings=0",
  'lint:fix': "eslint 'src/**/*.{ts,tsx}' --fix",
  format: "prettier --write .",
  test: 'vitest run',
  'test:watch': 'vitest',
  ci: 'npm run typecheck && npm run lint && npm run test'
}
for(const [k,v] of Object.entries(wantScripts)){
  if(!pkg.scripts[k]){ pkg.scripts[k] = v; log(`added script: ${k}`) }
}

pkg.devDependencies = pkg.devDependencies || {}
const wantDevDeps = [
  '@vitest/coverage-v8','vitest','eslint','eslint-config-prettier','eslint-plugin-import',
  'eslint-plugin-react','eslint-plugin-react-hooks','eslint-plugin-unused-imports','prettier'
]
let needInstall = []
for(const dep of wantDevDeps){ if(!pkg.devDependencies[dep]){ pkg.devDependencies[dep] = 'latest'; needInstall.push(dep) } }

writeFileSync(pkgPath, JSON.stringify(pkg,null,2)+"\n")
log('package.json updated')

// Config files
const files = [
  { path: '.eslintrc.cjs', content: `/* autogenerated */\nmodule.exports = {\n  root:true,\n  parser: '@typescript-eslint/parser',\n  parserOptions:{ ecmaVersion:'latest', sourceType:'module' },\n  settings:{ react:{ version:'detect' } },\n  plugins:['@typescript-eslint','react','react-hooks','unused-imports','import'],\n  extends:[ 'eslint:recommended','plugin:react/recommended','plugin:react-hooks/recommended','plugin:@typescript-eslint/recommended','plugin:import/recommended','plugin:import/typescript','prettier' ],\n  rules:{ 'react/react-in-jsx-scope':'off','unused-imports/no-unused-imports':'warn','import/order':['warn',{ alphabetize:{order:'asc',caseInsensitive:true},'newlines-between':'never'}], '@typescript-eslint/explicit-module-boundary-types':'off','@typescript-eslint/no-explicit-any':'off' },\n  ignorePatterns:['dist','coverage','node_modules']\n}\n` },
  { path: '.prettierrc.json', content: JSON.stringify({ semi:false, singleQuote:true, printWidth:100, trailingComma:'es5' },null,2)+"\n" },
  { path: 'vitest.config.ts', content: `import { defineConfig } from 'vitest/config'\nimport react from '@vitejs/plugin-react'\nexport default defineConfig({ test:{ environment:'jsdom', coverage:{ provider:'v8', reporter:['text','html'] } }, plugins:[react()] })\n` }
]
for(const f of files){ if(!existsSync(path.join(ROOT,f.path))){ writeFileSync(path.join(ROOT,f.path), f.content); log(`created ${f.path}`) } }

// Sample test
const testDir = path.join(ROOT,'src','lib')
if(!existsSync(testDir)) mkdirSync(testDir,{ recursive:true })
const utilTestPath = path.join(testDir,'utils.bootstrap.test.ts')
if(!existsSync(utilTestPath)){
  writeFileSync(utilTestPath, `import { describe,it,expect } from 'vitest'\nimport { toMin,minToHHMM } from './utils'\ndescribe('bootstrap time math',()=>{ it('round trips',()=>{ const samples=[0,1,59,60,1439]; for(const m of samples){ expect(toMin(minToHHMM(m))).toBe(m) } }) })\n`)
  log('added utils.bootstrap.test.ts')
}

// Install new devDeps only (avoid full reinstall if none added)
if(needInstall.length){
  try{
    log('installing new devDependencies: '+needInstall.join(', '))
    execSync(`npm install -D ${needInstall.join(' ')} --no-audit --no-fund`, { stdio:'inherit' })
  }catch(e){ console.warn('npm install failed, run manually:', e?.message) }
}else{
  log('no new devDependencies needed')
}

log('Done. Run: npm run ci')